//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IChatService", CallbackContract=typeof(Client.ServiceReference1.IChatServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/ClientConnect", ReplyAction="http://tempuri.org/IChatService/ClientConnectResponse")]
        Server.ChatUser ClientConnect(Server.ChatUser userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/ClientConnect", ReplyAction="http://tempuri.org/IChatService/ClientConnectResponse")]
        System.Threading.Tasks.Task<Server.ChatUser> ClientConnectAsync(Server.ChatUser userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/RemoveUser", ReplyAction="http://tempuri.org/IChatService/RemoveUserResponse")]
        void RemoveUser(Server.ChatUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/RemoveUser", ReplyAction="http://tempuri.org/IChatService/RemoveUserResponse")]
        System.Threading.Tasks.Task RemoveUserAsync(Server.ChatUser user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/sendNewMessage")]
        void sendNewMessage(Server.ChatMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/sendNewMessage")]
        System.Threading.Tasks.Task sendNewMessageAsync(Server.ChatMessage message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/newUserConnected", ReplyAction="http://tempuri.org/IChatService/newUserConnectedResponse")]
        void newUserConnected(Server.ChatUser user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/deliverNewMessage")]
        void deliverNewMessage(Server.ChatMessage message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : Client.ServiceReference1.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<Client.ServiceReference1.IChatService>, Client.ServiceReference1.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Server.ChatUser ClientConnect(Server.ChatUser userName) {
            return base.Channel.ClientConnect(userName);
        }
        
        public System.Threading.Tasks.Task<Server.ChatUser> ClientConnectAsync(Server.ChatUser userName) {
            return base.Channel.ClientConnectAsync(userName);
        }
        
        public void RemoveUser(Server.ChatUser user) {
            base.Channel.RemoveUser(user);
        }
        
        public System.Threading.Tasks.Task RemoveUserAsync(Server.ChatUser user) {
            return base.Channel.RemoveUserAsync(user);
        }
        
        public void sendNewMessage(Server.ChatMessage message) {
            base.Channel.sendNewMessage(message);
        }
        
        public System.Threading.Tasks.Task sendNewMessageAsync(Server.ChatMessage message) {
            return base.Channel.sendNewMessageAsync(message);
        }
    }
}
